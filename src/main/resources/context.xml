<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:security="http://www.springframework.org/schema/security"
     xmlns:jms="http://www.springframework.org/schema/jms"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
      http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">

	<!--
		SPRING SETUP
	-->

	<!-- Load properties so we can easily change them -->
	<context:property-placeholder location="classpath:application.properties" />
	
	<!-- Enable Annotation Configuration in order to automatically scan components -->
	<context:annotation-config />
	
	<!-- Allow @Transactional annotations for transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Search for Rest Resources and configure them automatically
	<context:component-scan base-package="jlm.rest.resources" />
	-->

	<!-- Search for Rest Resources and configure them automatically -->
	<context:component-scan base-package="jlm" />

	<!--
		DATABASE SETUP
	-->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="examplePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!--
	<bean id="blogPostDao" class="jlm.dao.blogpost.JpaBlogPostDao">	</bean>
	-->
	<bean id="userDao" class="jlm.dao.user.JpaUserDao">	</bean>

	<bean id="accessTokenDao"  class="jlm.dao.accesstoken.JpaAccessTokenDao"></bean>

	<bean id="userService" class="jlm.service.DaoUserService">
		<constructor-arg ref="userDao"/>
		<constructor-arg ref="accessTokenDao"/>
	</bean>
	
	<bean id="dataBaseInitializer" class="jlm.dao.DataBaseInitializer" init-method="initDataBase">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="jpaBlogPostDao"/>
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<!--
		INIT REST COMPONENTS
	-->
	
	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	
	<!-- 
		SPRING SECURITY SETUP
	-->
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${app.secret}" />
	</bean>
	
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="userService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<security:http
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager"
		create-session="stateless">
		<security:csrf disabled="true"/>
		<security:custom-filter ref="authenticationTokenProcessingFilter" position="PRE_AUTH_FILTER" />
		<security:intercept-url pattern="/rest/user/authenticate" access="permitAll" />
		<!-- <security:intercept-url method="GET" pattern="/rest/blogposts/**" access="hasRole('USER')"/>-->
		<security:intercept-url method="GET" pattern="/rest/blogposts/**" access="permitAll" />
		<security:intercept-url method="PUT" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
		<security:intercept-url method="POST" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
		<security:intercept-url method="DELETE" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
	</security:http>

	<bean id="unauthorizedEntryPoint" class="jlm.rest.UnauthorizedEntryPoint" />

	<bean id="authenticationTokenProcessingFilter" class="jlm.rest.AuthenticationTokenProcessingFilter">
		<constructor-arg ref="userService"/>
	</bean>

<!--		SPRING JMS SETUP

  &lt;!&ndash; 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供&ndash;&gt;
  <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>

  &lt;!&ndash; Spring用于管理真正的ConnectionFactory的ConnectionFactory &ndash;&gt;
  <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
    &lt;!&ndash; 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory &ndash;&gt;
    <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
  </bean>

  &lt;!&ndash; Spring提供的JMS工具类，它可以进行消息发送、接收等 &ndash;&gt;
  <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    &lt;!&ndash; 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 &ndash;&gt;
    <property name="connectionFactory" ref="connectionFactory"/>
  </bean>

  &lt;!&ndash;这个是队列目的地&ndash;&gt;
  <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg>
      <value>queue</value>
    </constructor-arg>
  </bean>

  &lt;!&ndash;这个是sessionAwareQueue目的地&ndash;&gt;
  <bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg>
      <value>sessionAwareQueue</value>
    </constructor-arg>
  </bean>
  &lt;!&ndash; 用于测试消息监听适配器的队列目的地 &ndash;&gt;
  <bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg>
      <value>adapterQueue</value>
    </constructor-arg>
  </bean>
  &lt;!&ndash; 用于测试消息回复的 &ndash;&gt;
  <bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg>
      <value>responseQueue</value>
    </constructor-arg>
  </bean>
  &lt;!&ndash; 默认的消息回复队列 &ndash;&gt;
  <bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg>
      <value>defaultResponseQueue</value>
    </constructor-arg>
  </bean>

  &lt;!&ndash;这个是主题目的地&ndash;&gt;
  <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
    <constructor-arg value="topic"/>
  </bean>

  &lt;!&ndash; 消息监听器 &ndash;&gt;
  <bean id="consumerMessageListener" class="jlm.jms.listener.ConsumerMessageListener">
    <property name="messageConverter" ref="emailMessageConverter"/>
  </bean>

  &lt;!&ndash; 可以获取session的MessageListener &ndash;&gt;
  <bean id="consumerSessionAwareMessageListener" class="jlm.jms.listener.ConsumerSessionAwareMessageListener">
    <property name="destination" ref="queueDestination"/>
  </bean>

  &lt;!&ndash; 消息监听适配器 &ndash;&gt;
  <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
    &lt;!&ndash; <constructor-arg>
      <bean class="jlm.jms.listener.ConsumerListener"/>
    </constructor-arg> &ndash;&gt;
    <property name="delegate">
      <bean class="jlm.jms.listener.ConsumerListener"/>
    </property>
    <property name="defaultListenerMethod" value="receiveMessage"/>
    <property name="defaultResponseDestination" ref="defaultResponseQueue"/>
    <property name="messageConverter">
      <null/>
    </property>
  </bean>
  &lt;!&ndash; responseQueue对应的监听器 &ndash;&gt;
  <bean id="responseQueueListener" class="jlm.jms.listener.ResponseQueueListener"/>
  &lt;!&ndash; defaultResponseQueue对应的监听器 &ndash;&gt;
  <bean id="defaultResponseQueueListener" class="jlm.jms.listener.DefaultResponseQueueListener"/>

  &lt;!&ndash; 消息监听适配器对应的监听容器 &ndash;&gt;
  <bean id="messageListenerAdapterContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory"/>
    <property name="destination" ref="adapterQueue"/>
    <property name="messageListener" ref="messageListenerAdapter"/>&lt;!&ndash; 使用MessageListenerAdapter来作为消息监听器 &ndash;&gt;
  </bean>
  &lt;!&ndash; responseQueue对应的监听容器 &ndash;&gt;
  <bean id="responseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory"/>
    <property name="destination" ref="responseQueue"/>
    <property name="messageListener" ref="responseQueueListener"/>
  </bean>
  &lt;!&ndash; defaultResponseQueue对应的监听容器 &ndash;&gt;
  <bean id="defaultResponseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory"/>
    <property name="destination" ref="defaultResponseQueue"/>
    <property name="messageListener" ref="defaultResponseQueueListener"/>
  </bean>
  &lt;!&ndash; 消息监听容器 &ndash;&gt;
  <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="destination" ref="queueDestination" />
    <property name="messageListener" ref="consumerMessageListener" />
  </bean>

  &lt;!&ndash;<bean id="topicConsumer" class="jlm.jms.service.TopicConsumer">&ndash;&gt;
  &lt;!&ndash;</bean>&ndash;&gt;

  &lt;!&ndash;&lt;!&ndash; 消息监听容器 &ndash;&gt;&ndash;&gt;
  &lt;!&ndash;<bean id="jmsContainer"&ndash;&gt;
  &lt;!&ndash;class="org.springframework.jms.listener.DefaultMessageListenerContainer">&ndash;&gt;
  &lt;!&ndash;<property name="connectionFactory" ref="connectionFactory" />&ndash;&gt;
  &lt;!&ndash;<property name="destination" ref="topicDestination" />&ndash;&gt;
  &lt;!&ndash;<property name="messageListener" ref="topicConsumer" />&ndash;&gt;
  &lt;!&ndash;</bean>&ndash;&gt;

  <bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="destination" ref="sessionAwareQueue" />
    <property name="messageListener" ref="consumerSessionAwareMessageListener" />
  </bean>

  &lt;!&ndash; 类型转换器 &ndash;&gt;
  <bean id="emailMessageConverter" class="jlm.jms.converter.EmailMessageConverter"/>-->

</beans>
